				 React
..............................................................................................

What is React?

  React is javascript lib for building single page web apps.

React java script lib like jquery,framework like angular.


What is User interface application?
 
  The user where he interacts , those applications are called user interface applications.

Eg:
  Desktop applications
     if you want to interact with os, shell is primary user interface
     shell in windows, command,powershell,explorer 

  Web Browser:
     It is one of the application software, acts as user interface for web applications

 
 Hand Held devices
  =>Mobile applications
  =>Watch
  =>Tabs
 etc..

Types of web app


1.static web apps -  1989 to 1995
    built at server end,accessed by clients using browser

2.dynamic content web apps - 1996 to till date
    built at server end, access by clients using browser
eg:
  JEE(Servlets,jsp)
  Asp.net
  PHP
 etc.....

3.Web Services -1998 to till
     built at server end, accessed by clients  such  as mobiles, client side browser apps.
 SOAP,RESTFull

4.Single Page Web Apps -  2007 to till date
   built at client side,accessed by clients browsers.
  built using javascript,html 5,css 3 
Frameworks and libs
 ->Angular js -  Angular 2 - 
 ->React.js - 2013 by facebook

............................................................................................
				     React

   "React is modern SPA lib created by face book based on "Flux Design Pattern"


Architecture for libs and frameworks:
Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			 Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine


				React Future
..............................................................................................

React was built by face book only for web browsers, later facebook decided to scale react for building other types of user application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices
.............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first

npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app

............................................................................................

			React Project layout- created by create-react-app
.............................................................................................

Folder Structure

myapp
 |
 node_modules
 package.json
 package-lock.json
 public 
 src
 readme.md


node_modules
  It is folder contains all libs files and folders downloaded from internet.
  React lib has been downloaded and kept inside this folder only.

package.json
   Every javascript project(it can be any js project), has package.json file  
   This file contains information about the project

Basic information:
 ->Name of the application "name" :"myapp"
 ->version of the application "version": "1.0.0"
 ->dedendencies
     libs  required for dev ,testing, production
    you can understand what version of lib is used in the current project
 ->scripts
     scripts contains information about how to start dev server,testing,production build.

package-lock.json:
  This file used by dev ops tools.


public 
  index.html
  This is entry file in react application.
  without this file we cant start the application

src
 |
 index.js
  App.js
 This folder contains application code files.

readme.md
   this is documentation file
..............................................................................................
				  HTML

HTML is core language for building any type of web apps.

static - html page is created at server and sent to browsers
dynamic -  html page is created at server by the programs on fly,sent to browser
spa - html page is created at client side on fly and rendered in the client itself using javascript.

			   DOM programming 

What is DOM?
  Document Object model, which is spec to build and modify html pages on fly.

Object oriented HTML, HTML elements are represented as objects.

eg:
 H1 - Object
div - Object
 p  - Object

DOM helps to create DOM onfly to attach on existing document
..........................................................................................
				HTML works internally
.............................................................................................

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

java
 -source .java
 -compile -.class -assembly
 -excute -jvm--result

index.html -source code
  html code is organized as hierachal model -  hierachial datastructure
<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

Layout/Paint Engine: will convert nodes into pxs : final output
..............................................................................................
				Dynamic HTML - Inside Web Browser
.............................................................................................

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.
............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*******************************************************************************************	

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?



if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()

<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.

How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


What is our objective here? DOM Programming?


Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element
.............................................................................................
				DOM Programming
.............................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....
..............................................................................................


Before 2007 - 

  HTML pages were created at server side, sent to the client , where jquery like javascript libs and frameworks were introduced to change the rendered html.
 After introduction of REST Full web services, Technology was changed.
 
 =>Server side programs only render data(json/xml) - REST APIS
 =>client side technology uses data json, where to create html pages.

                   "The birth of new Web App  - SPA - Single Web Application"

=SPA  is new Web Application introduced by "W3C"   as part of new HTML Spec.

SPA Tech Stack:
1.HTML 5
2.CSS 3
3.Javascript
4.AJAX

SPA is client side web application.
 =>creates html pages on the browser itself by getting data from the server via ajax.

2008 - Angular js framework was introduced
   The first MVC based SPA Framework
............................................................................................
				     Modern web

In the client side is SPA , server side REST 
In the server SPA can be prepared , sent to the client- Server side rendering
..............................................................................................


Before 2007 - 

  HTML pages were created at server side, sent to the client , where jquery like javascript libs and frameworks were introduced to change the rendered html.
 After introduction of REST Full web services, Technology was changed.
 
 =>Server side programs only render data(json/xml) - REST APIS
 =>client side technology uses data json, where to create html pages.

                   "The birth of new Web App  - SPA - Single Web Application"

=SPA  is new Web Application introduced by "W3C"   as part of new HTML Spec.

SPA Tech Stack:
1.HTML 5
2.CSS 3
3.Javascript
4.AJAX

SPA is client side web application.
 =>creates html pages on the browser itself by getting data from the server via ajax.

2008 - Angular js framework was introduced
   The first MVC based SPA Framework
............................................................................................
............................................................................................
.............................................................................................
.............................................................................................
			How to create dom node , attach on existing tree
				using plain js

				
Note : 
 index.js

//How to create simple element using plain javascript

function createElement() {
    let Heading = document.createElement('h1')
    console.log(Heading)
    Heading.innerHTML = "Hello React!"
    let rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createElement()
.............................................................................................
			How to create dom node , attach on existing tree
				using react.js


//dom element using react.
import React from 'react'
import ReactDOM from 'react-dom'

//  let Heading = document.createElement('h1')
const Heading = <h1>Hello React!!</h1>

//get element where you want to attach.
const rootElement = document.getElementById('root')

ReactDOM.render(Heading,rootElement)


The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language

..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div><div><h1>Hello</h1></div></div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements

Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sale applcation , and purchase application.

..............................................................................................
				One Component is not a component
.............................................................................................
In large application, we create more components.
All components we coimbine to make up other big components or application.
Such wiring(connecting) components forms the structure called "component tree".

Component Tree:
   =>Object tree / DOM Tree / Virutal DOM Tree.
..............................................................................................
How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern



//functions 
import React from 'react';
import ReactDOM from 'react-dom';

//create component using functions

// function Heading() {
//     return <h1>Hello!</h1> // jsx element 
// }

//es 6 arrow function 

// const Heading = () => {
//     return <h1>Hello!</h1> // jsx element 
// }
const Heading = () => <h1>Hello!</h1> // jsx element 

//imperative style of calling funciton : dont do this
// ReactDOM.render(Heading(), document.getElementById('root'))
//declarative style of calling function; you have to do this
ReactDOM.render(<Heading></Heading>, document.getElementById('root'))



import React from 'react';
import ReactDOM from 'react-dom';

//create component using  es 6 class

class Heading extends React.Component {

    render() {
        return <h1>Hello React!!!</h1>
    }
}



ReactDOM.render(<Heading></Heading>, document.getElementById('root'))


3.ES 6 class Pattern

Create Components Using ES 6 Class:
....................................

in order to create component  we need to inherit React.Component

React.Component is base class, which contains the follwing things

1.instance variables
 props
 state
2.instance methods

life cycle methods
 
to be discussed later
render() - Which returns ReactElement
 
other methods
to be discussed later

3.static variables
to be discussed later


Note: 
  Which pattern is good, or when to use?

 There is no pattern is bad or good.

 In case if react application is running old versions(before 16)

 =>class components 
     are used to mutate the state using setState method - statefull components
     Where ever you need life cycle methods
        
 =>function components are used to render ui and data - stateless components
 =>variable components are used just render static markup or tiny components used inside large   components.


 In case if react application is running new versions(After 16)

 functions and classes share the same behaviour
 functions can have state mutations, life cycle methods via a feature called "hooks".
 funcitional components are very powerfull with respect reuseability.

..............................................................................................	
				JSX Rules
..............................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

3.Component names should start with Uppercase,generally would be noun.


eg:
import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello
}

ReactDOM.render(<Heading></Heading>, document.getElementById('root'));

src\index.js
  Line 8:35:  Parsing error: Unterminated JSX contents. (8:35)


Elements with no child : self closing.
import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello</h1>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading/>, document.getElementById('root'));

..............................................................................................

import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello</h1>
            <h2>Sapient</h2>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading/>, document.getElementById('root'));

 Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (6:12)

webpack 5.70.0 compiled with 2 errors in 41 ms

How to fix this problem?
  we need to wrap inside root/parent element.

What can be parent element?

  =>any html container  elements -  table,div,span,header,footer,address,nav
  =>you can use other components -  Tab,Dashboard....

.............
Right Code;
import React from "react";
import ReactDOM from 'react-dom';

const Heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading />, document.getElementById('root'));
..............................................................................................
Component names should start with Uppercase,generally would be noun.

import React from "react";
import ReactDOM from 'react-dom';

const heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<heading />, document.getElementById('root'));

react-dom.development.js:67 Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at heading

Here it wont throw any error,but it wont render any thing in the screen.
you can see warnings in the console. you have to fix it.  
..............................................................................................
..............................................................................................
				 How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call

..............................................................................................
..............................................................................................
				Component Composition
..............................................................................................

How to break large ui into smaller and smallar.

Why we need to create components?
 -Resuablity

DRY

How to create Component tree?

Layouts:

 Page
   Header
   Body 
   Footer


import React from "react";
import ReactDOM from 'react-dom';

const Link = () => <ul>
    <li><a href="letscreate">Let's Create</a></li>
    <li><a href="products">Products and Solutions</a></li>
    <li><a href="consulting">Consulting & Services</a></li>
    <li><a href="support">Learn & Support</a></li>
</ul>

const MenuBar = () => <nav>
        <Link/>
</nav>

//Header
const Header = () => <header>
    <h1>IBM -header</h1>
    <hr />
    <MenuBar />
</header>
//Body
const Body = () => <div>
    <p>
        International Business Machines Corporation (IBM) is an American multinational technology corporation headquartered in Armonk, New York, with operations in over 171 countries. The company began in 1911, founded in Endicott, New York, by trust businessman Charles Ranlett Flint, as the Computing-Tabulating-Recording Company (CTR) and was renamed "International Business Machines" in 1924. IBM is incorporated in New York
    </p>
</div>

//Footer 
const Footer = () => <header>
    <h1>IBM-Footer</h1>
</header>
//Page

//component linking
const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>

//Application component
const App = () => <Page />

ReactDOM.render(<App />, document.getElementById('root'))

..............................................................................................
				React Dev tools
..............................................................................................

React dev tool is used to visualize the component tree in the browser, without looking the source code ,how the tree has been constructured.

How to install react dev tool?

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

How to use react dev tool?

 1.lanuch application
 2.open dev tool inside chrome
.............................................................................................
.............................................................................................
				Component Compostion and Modularity
..............................................................................................

In react application, we dont / never dump the code into single file, we need to modularize the application.

File Structure
Is there a recommended way to structure React projects?

  React doesn’t have any opinions on how you put files into folders. 
  That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by "features" or "routes-menu"
  One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
			
common or util /
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
 Another popular way to structure projects is to group similar files together, for example:

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.

               "https://bradfrost.com/blog/post/atomic-web-design/"


File Name conventions:

 FileName must match component feature  - profile 

File Name can be saved as fileName.js or fileName.jsx

Rules for jsx extensions:

-Root file (index,App) files must not be saved with ".jsx" , root files must be saved only with .js extension.

-Barrel export feature must be used in large application.


src/links/link.jsx
import React from 'react'

const Link = () => <ul>
    <li><a href="letscreate">Let's Create</a></li>
    <li><a href="products">Products and Solutions</a></li>
    <li><a href="consulting">Consulting & Services</a></li>
    <li><a href="support">Learn & Support</a></li>
</ul>
export { Link };

src/menus/menubar.jsx
import React from 'react'
import { Link } from '../links/link'

const MenuBar = () => <nav>
    <Link />
</nav>

export { MenuBar }

src/header/header.jsx
import React from 'react'
import { MenuBar } from '../menus/menubar'

const Header = () => <header>
    <h1>IBM -header</h1>
    <hr />
    <MenuBar />
</header>

export {Header}


src/footer/footer.jsx
import React from 'react'

//Footer 
export const Footer = () => <header>
    <h1>IBM-Footer</h1>
</header>
//Page


src/body/body.jsx
import React  from "react"

export const Body = () => <div>
<p>
    International Business Machines Corporation (IBM) is an American multinational technology corporation headquartered in Armonk, New York, with operations in over 171 countries. The company began in 1911, founded in Endicott, New York, by trust businessman Charles Ranlett Flint, as the Computing-Tabulating-Recording Company (CTR) and was renamed "International Business Machines" in 1924. IBM is incorporated in New York
</p>
</div>

src/page/page.jsx
import { Header } from '../header/header'
import { Body } from '../body/body'
import { Footer } from '../footer/footer'

//component linking
export const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>

src/App.js
import React from 'react'
import { Page } from './page/page'

const App = () => <Page />

export default App;


src/index.js
import ReactDOM from 'react-dom';
import App from './App';


ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................

.............................................................................................
				Barrel export
.............................................................................................

Use Case :

=>How to avoid multiple import of things from same folder
=>how to avoid file names while import

Barrel export solves the above problem

src/header
 -header.jsx
 -menubar.jsx
 -index.js

Steps:
1 inside every subfolders(header,body,profile)
 create index.js

2.import what ever you want to export outside 

3. you re export again what ever you have imported


src/header/index.js

import { Header } from './header'
import { MenuBar } from './menubar'

//barrel export : Re export
export { Header, MenuBar }
.............................................................................................
..............................................................................................
				How to Style components
..............................................................................................

CSS integration:
................

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

HTML ATTRIBUTES And JSX:

 We cant /should not add html attributes directly in jsx code.
 JSX uses certain rules for adding html attributes.

 "Since JSX is closer to JavaScript than to HTML, React DOM uses "camelCase property naming convention" instead of HTML attribute names"

For example, class becomes className in JSX, and tabindex becomes tabIndex.

<div className="container" tabIndex>

</div>

List of jsx attributes:
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap

"https://reactjs.org/docs/dom-elements.html"

adding Events Handlers

 <button onClick={method}></button>
  
CSS : 

->You can add your own css - custom css
->you can add third party css frameworks -  bootstrap,materialdesign,spark...

import statement can be used to import js files.

import statement can also be used to import
=>css files
=>images
=>any static assets.


import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
import './index.css' //webpack automatically include this inside bundle
import './App.css'

const App = () => <div className="App">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))

Note: if you import css in root file(index.js), those css styles will be available across the applications.
..............................................................................................
				Component level css
.............................................................................................
if you want to apply/use css for a particular component.

src/header/header.css
.background {
    background-color: antiquewhite;
}

src/header/header.jsx
import React from 'react';
import './header.css'

export const Header = () => <header className="background">
    <h1>Sapient</h1>
</header>
.............................................................................................
			  How to add third party css - bootstrap
............................................................................................

Steps:

1.install bootstrap

npm install bootstrap --save

2.import bootstrap in index.js
import 'bootstrap/dist/css/bootstrap.css'

import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
// import './index.css' //webpack automatically include this inside bundle
// import './App.css'
import 'bootstrap/dist/css/bootstrap.css'

const App = () => <div className="container">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................
				Style Attribute
..............................................................................................


In html style is just a string

<div style="background-color:red">

In jsx(react) style is object

Style Object is nothing "css property representation in javascript"

CSS styles:

.className {
  background-color:pink;  //dash case notation
}

Css styles in javascript
 In js css styles are represented as camel case notation.

backgroundColor=pink

element.style.backgroundColor=pink

  "https://www.w3schools.com/jsref/dom_obj_style.asp"



Steps to create style object and attach with element

1.declare style object
//style object
const headerStyle = {
    backgroundColor: 'red'
};
2.attach with element
export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
</header>


import React from 'react';
import './header.css'

//style object
const headerStyle = {
    color: 'red'
};

export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
    <h2 style={{ color: 'blue' }}>Publisis</h2>
</header>
..............................................................................................















